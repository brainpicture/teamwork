package main

import (
	"fmt"
	"strings"
	"time"

	"telegram-bot/internal"
)

func main() {
	fmt.Println("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤")
	fmt.Println(strings.Repeat("=", 50))

	// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π OpenAI
	fmt.Println("\nüìã 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π OpenAI")
	testGPTFunctions()

	// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
	fmt.Println("\nüß© 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤")
	testModularPrompts()

	// –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
	fmt.Println("\n‚úÖ 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤")
	testPromptValidation()

	// –¢–µ—Å—Ç 4: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
	fmt.Println("\nüéØ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤")
	testAdaptivePrompts()

	// –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	fmt.Println("\nüìä 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
	testPromptMetrics()

	fmt.Println("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
}

func testGPTFunctions() {
	functions := internal.GetGPTFunctions()
	fmt.Printf("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: %d\n", len(functions))

	requiredFunctions := []string{
		"list_projects", "create_project", "update_project", "delete_project",
		"list_tasks", "create_task", "update_task", "delete_task",
		"set_current_project", "get_current_project", "send_message_with_buttons",
	}

	functionMap := make(map[string]bool)
	for _, fn := range functions {
		functionMap[fn.Name] = true
		fmt.Printf("   ‚úì %s: %s\n", fn.Name, fn.Description)
	}

	missing := []string{}
	for _, required := range requiredFunctions {
		if !functionMap[required] {
			missing = append(missing, required)
		}
	}

	if len(missing) > 0 {
		fmt.Printf("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: %v\n", missing)
	} else {
		fmt.Println("   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
	}
}

func testModularPrompts() {
	// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	contexts := []*internal.PromptContext{
		{UserID: 1, Capability: "basic", HasProjects: false},
		{UserID: 2, Capability: "advanced", HasProjects: true},
		{UserID: 3, Capability: "expert", HasProjects: true, CurrentProject: &internal.Project{
			ID: 1, Title: "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", Description: "–û–ø–∏—Å–∞–Ω–∏–µ", Status: "active", UserRole: "owner",
		}},
	}

	for i, ctx := range contexts {
		fmt.Printf("   –ö–æ–Ω—Ç–µ–∫—Å—Ç %d (%s, –ø—Ä–æ–µ–∫—Ç—ã: %t):\n", i+1, ctx.Capability, ctx.HasProjects)
		prompt := internal.GetSystemPromptV2(ctx)
		
		lines := strings.Split(prompt, "\n")
		fmt.Printf("     –°—Ç—Ä–æ–∫ –≤ –ø—Ä–æ–º–ø—Ç–µ: %d\n", len(lines))
		fmt.Printf("     –°–∏–º–≤–æ–ª–æ–≤: %d\n", len(prompt))
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
		keywords := []string{"—Ñ—É–Ω–∫—Ü–∏–∏", "–ø—Ä–æ–µ–∫—Ç", "–∑–∞–¥–∞—á", "–ø–æ–º–æ—â–Ω–∏–∫"}
		for _, keyword := range keywords {
			if strings.Contains(strings.ToLower(prompt), keyword) {
				fmt.Printf("     ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç: %s\n", keyword)
			}
		}
		fmt.Println()
	}
}

func testPromptValidation() {
	validator := &internal.PromptValidator{
		MaxLength:      6000,
		RequiredWords:  []string{"–ø–æ–º–æ—â–Ω–∏–∫", "—Ñ—É–Ω–∫—Ü–∏–∏"},
		ForbiddenWords: []string{},
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
	basicPrompt := internal.GetSystemPromptV2(&internal.PromptContext{Capability: "basic"})
	valid, issues := validator.ValidatePrompt(basicPrompt)

	fmt.Printf("   –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤–∞–ª–∏–¥–µ–Ω: %t\n", valid)
	if !valid {
		fmt.Println("   –ü—Ä–æ–±–ª–µ–º—ã:")
		for _, issue := range issues {
			fmt.Printf("     - %s\n", issue)
		}
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
	fmt.Println("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:")
	results := internal.TestPromptQuality()
	if len(results) == 0 {
		fmt.Println("     ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
	} else {
		for module, issues := range results {
			fmt.Printf("     ‚ùå %s: %v\n", module, issues)
		}
	}
}

func testAdaptivePrompts() {
	scenarios := []struct {
		name    string
		context *internal.PromptContext
	}{
		{
			"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
			&internal.PromptContext{UserID: 1, Capability: "basic", HasProjects: false},
		},
		{
			"–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
			&internal.PromptContext{UserID: 2, Capability: "advanced", HasProjects: true},
		},
		{
			"–≠–∫—Å–ø–µ—Ä—Ç —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º",
			&internal.PromptContext{
				UserID: 3, Capability: "expert", HasProjects: true,
				CurrentProject: &internal.Project{ID: 1, Title: "–ü—Ä–æ–µ–∫—Ç", Status: "active"},
			},
		},
	}

	for _, scenario := range scenarios {
		fmt.Printf("   %s:\n", scenario.name)
		prompt := internal.GetSystemPromptV2(scenario.context)
		
		// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
		if scenario.context.HasProjects && strings.Contains(prompt, "–¢–ï–ö–£–©–ò–ô –ü–†–û–ï–ö–¢") {
			fmt.Println("     ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
		}
		
		if scenario.context.Capability == "expert" && len(prompt) > 1000 {
			fmt.Println("     ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞")
		}
		
		fmt.Printf("     –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(prompt))
		fmt.Println()
	}
}

func testPromptMetrics() {
	optimizer := internal.NewPromptOptimizer()
	
	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
	testData := []struct {
		promptID     string
		userID       int
		success      bool
		tokens       int
		responseTime time.Duration
	}{
		{"basic_prompt", 1, true, 150, 2 * time.Second},
		{"basic_prompt", 1, true, 200, 3 * time.Second},
		{"basic_prompt", 2, false, 300, 8 * time.Second},
		{"advanced_prompt", 3, true, 400, 5 * time.Second},
		{"advanced_prompt", 3, true, 350, 4 * time.Second},
	}

	for _, data := range testData {
		optimizer.TrackUsage(data.promptID, data.userID, data.success, data.tokens, data.responseTime)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	fmt.Println("   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
	for _, promptID := range []string{"basic_prompt", "advanced_prompt"} {
		suggestions := optimizer.GetOptimizationSuggestions(promptID)
		fmt.Printf("     %s:\n", promptID)
		for _, suggestion := range suggestions {
			fmt.Printf("       - %s\n", suggestion)
		}
	}
}

