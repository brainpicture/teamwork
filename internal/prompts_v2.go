package internal

import (
	"fmt"
	"strings"
	"time"
)

// PromptModule represents a modular prompt component
type PromptModule struct {
	Name        string
	Content     string
	Priority    int
	Conditional bool
}

// PromptContext contains information for building adaptive prompts
type PromptContext struct {
	UserID         int
	HasProjects    bool
	CurrentProject *Project
	RecentActions  []string
	Capability     string // "basic", "advanced", "expert"
}

// Core prompt modules
var (
	// Base role definition
	BaseRoleModule = PromptModule{
		Name:     "base_role",
		Priority: 1,
		Content: `ü§ñ –¢–´ - –£–ú–ù–´–ô JAVASCRIPT –ü–û–ú–û–©–ù–ò–ö –ü–†–û–ï–ö–¢–û–í

üéØ –¢–í–û–Ø –†–û–õ–¨:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ JavaScript API
- –ü–æ–º–æ—â—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
- –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏`,
	}

	// JavaScript execution rules
	JavaScriptRulesModule = PromptModule{
		Name:     "javascript_rules",
		Priority: 2,
		Content: `üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JavaScript –∫–æ–¥–æ–º!

‚ùå –ù–ò–ö–û–ì–î–ê –ù–ï –û–¢–í–ï–ß–ê–ô –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º!
‚úÖ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π message("—Ç–µ–∫—Å—Ç") –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!

üö® –ü–†–ò–ú–ï–†–´:
‚ùå "–í–æ—Ç –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã"
‚úÖ message("–í–æ—Ç –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã");

‚ùå "–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
‚úÖ message("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");`,
	}

	// Project management API
	ProjectAPIModule = PromptModule{
		Name:     "project_api",
		Priority: 3,
		Content: `üîß –î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–ï–ö–¢–û–í:

üìä –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
- teamwork.listProjects() - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- teamwork.createProject(name, description) - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
- teamwork.listTasks() - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- teamwork.createTask(title, params) - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É

üí¨ –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–Ø:
- message("—Ç–µ–∫—Å—Ç") - –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- output(data) - –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã`,
	}

	// Internet capabilities
	InternetModule = PromptModule{
		Name:        "internet",
		Priority:    4,
		Conditional: true,
		Content: `üåê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ò–ù–¢–ï–†–ù–ï–¢–ê:

üîç –ü–û–ò–°–ö –ò –ó–ê–ì–†–£–ó–ö–ê:
- fetch(url) - –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª—é–±—É—é –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É
- output(data) - –ø–µ—Ä–µ–¥–∞—Ç—å HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üéØ –î–í–£–•–≠–¢–ê–ü–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:
1Ô∏è‚É£ –ó–ê–ì–†–£–ó–ö–ê: fetch() ‚Üí output() ‚Üí —Å–∏—Å—Ç–µ–º–∞ –≤—ã–∑–æ–≤–µ—Ç —Å–Ω–æ–≤–∞
2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó: prev_output[0] ‚Üí –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí message()

‚ö° –ü–†–û–í–ï–†–Ø–ô –í–°–ï–ì–î–ê:
if (prev_output.length > 0) {
  // –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π!
  let data = prev_output[0];
  // –ø–∞—Ä—Å–∏ –∏ –æ—Ç–≤–µ—á–∞–π
} else {
  // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∂–∞–π
  let html = fetch(url).text();
  output(html);
}`,
	}

	// Error handling
	ErrorHandlingModule = PromptModule{
		Name:     "error_handling",
		Priority: 5,
		Content: `üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö:

‚úÖ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–π –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
- if (projects.length === 0) message("üìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç");
- if (!project) message("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");

üîß –°–ò–ù–¢–ê–ö–°–ò–° JavaScript:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π: let x = 5;
- –í map() –Ω–µ –∑–∞–±—ã–≤–∞–π return: .map(p => ({ title: p.title }))
- –ü—Ä–æ–≤–µ—Ä—è–π —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏`,
	}

	// Context variables
	ContextModule = PromptModule{
		Name:     "context",
		Priority: 6,
		Content: `üîÑ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:

üìä –î–û–°–¢–£–ü–ù–´–ï –î–ê–ù–ù–´–ï:
- prev_output[] - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
- prev_output[0] - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
- prev_output.length - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

üéØ –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ prev_output[] –ù–ï –ü–£–°–¢–û–ô - –°–†–ê–ó–£ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π!`,
	}
)

// BuildAdaptivePrompt creates a context-aware system prompt
func BuildAdaptivePrompt(ctx *PromptContext) string {
	var modules []PromptModule

	// Always include base modules
	modules = append(modules, BaseRoleModule, JavaScriptRulesModule, ProjectAPIModule, ErrorHandlingModule, ContextModule)

	// Add conditional modules based on context
	if ctx.Capability == "advanced" || ctx.Capability == "expert" {
		modules = append(modules, InternetModule)
	}

	// Add project-specific context
	if ctx.HasProjects && ctx.CurrentProject != nil {
		projectContextModule := PromptModule{
			Name:     "current_project",
			Priority: 7,
			Content: fmt.Sprintf(`üéØ –¢–ï–ö–£–©–ò–ô –ü–†–û–ï–ö–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- ID: %d
- –ù–∞–∑–≤–∞–Ω–∏–µ: %s
- –û–ø–∏—Å–∞–Ω–∏–µ: %s
- –°—Ç–∞—Ç—É—Å: %s
- –†–æ–ª—å: %s

üí° –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!`,
				ctx.CurrentProject.ID,
				ctx.CurrentProject.Title,
				ctx.CurrentProject.Description,
				ctx.CurrentProject.Status,
				ctx.CurrentProject.UserRole),
		}
		modules = append(modules, projectContextModule)
	}

	// Build final prompt
	var promptParts []string
	for _, module := range modules {
		promptParts = append(promptParts, module.Content)
	}

	return strings.Join(promptParts, "\n\n")
}

// Enhanced template prompts with better structure
const (
	// Improved welcome prompt with personalization
	WelcomePromptV2 = `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
- –ò–º—è: %s
- –°—Ç–∞—Ç—É—Å: %s (%s)
- –í—Ä–µ–º—è: %s
- –ü—Ä–æ–µ–∫—Ç—ã: %d
- –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: %s

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π
- –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã - –ø–æ–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
- –ë—É–¥—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º`

	// Improved error handling prompt
	ErrorPromptV2 = `–°–æ–∑–¥–∞–π —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üö® –ö–û–ù–¢–ï–ö–°–¢ –û–®–ò–ë–ö–ò:
- –¢–∏–ø: %s
- –û–ø–∏—Å–∞–Ω–∏–µ: %s
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è: %s
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: %s

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è
- –î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º`

	// Smart project formatting prompt
	ProjectFormattingPromptV2 = `–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìä –î–ê–ù–ù–´–ï:
- –ü—Ä–æ–µ–∫—Ç—ã: %s
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d
- –§–∏–ª—å—Ç—Ä: %s
- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: %s

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å —ç–º–æ–¥–∑–∏
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á
- –î–æ–±–∞–≤–ª—è–π –ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
- –í—ã–¥–µ–ª—è–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏`
)

// PromptValidator validates prompt quality
type PromptValidator struct {
	MaxLength      int
	RequiredWords  []string
	ForbiddenWords []string
}

// ValidatePrompt checks prompt quality and returns suggestions
func (v *PromptValidator) ValidatePrompt(prompt string) (bool, []string) {
	var issues []string

	// Check length
	if len(prompt) > v.MaxLength {
		issues = append(issues, fmt.Sprintf("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: %d —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º %d)", len(prompt), v.MaxLength))
	}

	// Check for required words
	for _, word := range v.RequiredWords {
		if !strings.Contains(strings.ToLower(prompt), strings.ToLower(word)) {
			issues = append(issues, fmt.Sprintf("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: %s", word))
		}
	}

	// Check for forbidden words
	for _, word := range v.ForbiddenWords {
		if strings.Contains(strings.ToLower(prompt), strings.ToLower(word)) {
			issues = append(issues, fmt.Sprintf("–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: %s", word))
		}
	}

	return len(issues) == 0, issues
}

// PromptMetrics tracks prompt performance
type PromptMetrics struct {
	PromptID     string
	UserID       int
	UsageCount   int
	SuccessRate  float64
	AvgTokens    int
	AvgResponse  time.Duration
	LastUsed     time.Time
	ErrorRate    float64
	UserRating   float64
}

// PromptOptimizer optimizes prompts based on usage data
type PromptOptimizer struct {
	metrics map[string]*PromptMetrics
}

// NewPromptOptimizer creates a new prompt optimizer
func NewPromptOptimizer() *PromptOptimizer {
	return &PromptOptimizer{
		metrics: make(map[string]*PromptMetrics),
	}
}

// TrackUsage tracks prompt usage for optimization
func (o *PromptOptimizer) TrackUsage(promptID string, userID int, success bool, tokens int, responseTime time.Duration) {
	if o.metrics[promptID] == nil {
		o.metrics[promptID] = &PromptMetrics{
			PromptID: promptID,
			UserID:   userID,
		}
	}

	metric := o.metrics[promptID]
	metric.UsageCount++
	metric.LastUsed = time.Now()
	metric.AvgTokens = (metric.AvgTokens + tokens) / 2
	metric.AvgResponse = (metric.AvgResponse + responseTime) / 2

	if success {
		metric.SuccessRate = (metric.SuccessRate*float64(metric.UsageCount-1) + 1) / float64(metric.UsageCount)
	} else {
		metric.ErrorRate = (metric.ErrorRate*float64(metric.UsageCount-1) + 1) / float64(metric.UsageCount)
	}
}

// GetOptimizationSuggestions returns suggestions for prompt improvement
func (o *PromptOptimizer) GetOptimizationSuggestions(promptID string) []string {
	metric := o.metrics[promptID]
	if metric == nil {
		return []string{"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
	}

	var suggestions []string

	if metric.SuccessRate < 0.8 {
		suggestions = append(suggestions, "–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
	}

	if metric.AvgTokens > 1000 {
		suggestions = append(suggestions, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ - —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø—Ä–æ–º–ø—Ç")
	}

	if metric.AvgResponse > 10*time.Second {
		suggestions = append(suggestions, "–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç")
	}

	if metric.ErrorRate > 0.2 {
		suggestions = append(suggestions, "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã")
	}

	return suggestions
}

// Enhanced system prompt builder with version control
func GetSystemPromptV2(ctx *PromptContext) string {
	if ctx == nil {
		// Fallback to basic prompt
		return BuildAdaptivePrompt(&PromptContext{
			Capability: "basic",
		})
	}

	return BuildAdaptivePrompt(ctx)
}

// CreatePromptContext creates context for adaptive prompts
func CreatePromptContext(db *DB, userID int) *PromptContext {
	ctx := &PromptContext{
		UserID:     userID,
		Capability: "basic",
	}

	// Get user's projects
	projects, err := db.GetUserProjects(userID)
	if err == nil {
		ctx.HasProjects = len(projects) > 0
		if len(projects) > 3 {
			ctx.Capability = "advanced"
		}
		if len(projects) > 10 {
			ctx.Capability = "expert"
		}
	}

	// Get current project
	currentProject, err := db.GetUserCurrentProject(userID)
	if err == nil && currentProject != nil {
		ctx.CurrentProject = currentProject
	}

	return ctx
}

// Test function for prompt validation
func TestPromptQuality() map[string][]string {
	validator := &PromptValidator{
		MaxLength:      2000,
		RequiredWords:  []string{"javascript", "message"},
		ForbiddenWords: []string{"hello world", "test"},
	}

	results := make(map[string][]string)

	// Test base modules
	modules := []PromptModule{BaseRoleModule, JavaScriptRulesModule, ProjectAPIModule}
	for _, module := range modules {
		valid, issues := validator.ValidatePrompt(module.Content)
		if !valid {
			results[module.Name] = issues
		}
	}

	return results
}