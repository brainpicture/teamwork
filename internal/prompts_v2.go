package internal

import (
	"fmt"
	"strings"
	"time"
)

// PromptModule represents a modular prompt component
type PromptModule struct {
	Name        string
	Content     string
	Priority    int
	Conditional bool
}

// PromptContext contains information for building adaptive prompts
type PromptContext struct {
	UserID         int
	HasProjects    bool
	CurrentProject *Project
	RecentActions  []string
	Capability     string // "basic", "advanced", "expert"
}

// Core prompt modules
var (
	// Base role definition
	BaseRoleModule = PromptModule{
		Name:     "base_role",
		Priority: 1,
		Content: `ü§ñ –¢–´ - –£–ú–ù–´–ô –ü–û–ú–û–©–ù–ò–ö –ü–û –£–ü–†–ê–í–õ–ï–ù–ò–Æ –ü–†–û–ï–ö–¢–ê–ú–ò

üéØ –¢–í–û–Ø –†–û–õ–¨:
- –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —á–µ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã`,
	}

	// Function calling rules
	FunctionCallingRulesModule = PromptModule{
		Name:     "function_calling_rules",
		Priority: 2,
		Content: `ÔøΩ –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô:

‚úÖ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:
- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π list_projects
- –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: –∏—Å–ø–æ–ª—å–∑—É–π create_project
- –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏: –∏—Å–ø–æ–ª—å–∑—É–π create_task, list_tasks, update_task
- –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏: –∏—Å–ø–æ–ª—å–∑—É–π send_message_with_buttons

üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –í–´–ë–û–†–ê –§–£–ù–ö–¶–ò–ô:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
- –ü–æ–¥–≥–æ—Ç–æ–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –í—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ –ø—ã—Ç–∞–π—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏!`,
	}

	// Project management API
	ProjectAPIModule = PromptModule{
		Name:     "project_api",
		Priority: 3,
		Content: `ÔøΩ –î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–ï–ö–¢–û–í:

ÔøΩ –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–•:
- list_projects - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É)
- list_tasks - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É/—Å—Ç–∞—Ç—É—Å—É)
- get_current_project - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç

‚úèÔ∏è –°–û–ó–î–ê–ù–ò–ï –ò –ò–ó–ú–ï–ù–ï–ù–ò–ï:
- create_project - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
- update_project - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
- delete_project - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
- create_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
- update_task - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
- delete_task - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

üéõÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï:
- set_current_project - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
- send_message_with_buttons - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏`,
	}

	// Response formatting
	ResponseFormattingModule = PromptModule{
		Name:     "response_formatting",
		Priority: 4,
		Content: `üí¨ –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –û–¢–í–ï–¢–û–í:

ÔøΩ –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
- –ì—Ä—É–ø–ø–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–µ—Å–∫–∏
- –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

üî¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–ò–°–ö–û–í:
- –ü—Ä–æ–µ–∫—Ç—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
- –ó–∞–¥–∞—á–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–µ–¥–ª–∞–π–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤

üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
- –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö`,
	}

	// Error handling
	ErrorHandlingModule = PromptModule{
		Name:     "error_handling",
		Priority: 5,
		Content: `üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö:

‚úÖ –ü–†–û–í–ï–†–Ø–ô –î–ê–ù–ù–´–ï:
- –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
- –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

ÔøΩ –ü–û–ú–û–©–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:
- –û–±—ä—è—Å–Ω—è–π –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é

üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï:
- –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º`,
	}

	// Context variables
	ContextModule = PromptModule{
		Name:     "context",
		Priority: 6,
		Content: `üîÑ –ö–û–ù–¢–ï–ö–°–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:

üìä –ò–°–ü–û–õ–¨–ó–£–ô –ö–û–ù–¢–ï–ö–°–¢:
- –ò—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
- –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX

üéØ –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨:
- –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ó–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –±–µ—Å–µ–¥—ã
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞`,
	}
)

// BuildAdaptivePrompt creates a context-aware system prompt
func BuildAdaptivePrompt(ctx *PromptContext) string {
	var modules []PromptModule

	// Always include base modules
	modules = append(modules, BaseRoleModule, FunctionCallingRulesModule, ProjectAPIModule, ResponseFormattingModule, ErrorHandlingModule, ContextModule)

	// Add conditional modules based on context
	if ctx.Capability == "advanced" || ctx.Capability == "expert" {
		// Add InternetModule
	}

	// Add project-specific context
	if ctx.HasProjects && ctx.CurrentProject != nil {
		projectContextModule := PromptModule{
			Name:     "current_project",
			Priority: 7,
			Content: fmt.Sprintf(`üéØ –¢–ï–ö–£–©–ò–ô –ü–†–û–ï–ö–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- ID: %d
- –ù–∞–∑–≤–∞–Ω–∏–µ: %s
- –û–ø–∏—Å–∞–Ω–∏–µ: %s
- –°—Ç–∞—Ç—É—Å: %s
- –†–æ–ª—å: %s

üí° –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!`,
				ctx.CurrentProject.ID,
				ctx.CurrentProject.Title,
				ctx.CurrentProject.Description,
				ctx.CurrentProject.Status,
				ctx.CurrentProject.UserRole),
		}
		modules = append(modules, projectContextModule)
	}

	// Build final prompt
	var promptParts []string
	for _, module := range modules {
		promptParts = append(promptParts, module.Content)
	}

	return strings.Join(promptParts, "\n\n")
}

// Enhanced template prompts with better structure
const (
	// Improved welcome prompt with personalization
	WelcomePromptV2 = `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
- –ò–º—è: %s
- –°—Ç–∞—Ç—É—Å: %s (%s)
- –í—Ä–µ–º—è: %s
- –ü—Ä–æ–µ–∫—Ç—ã: %d
- –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: %s

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π
- –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã - –ø–æ–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
- –ë—É–¥—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º`

	// Improved error handling prompt
	ErrorPromptV2 = `–°–æ–∑–¥–∞–π —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üö® –ö–û–ù–¢–ï–ö–°–¢ –û–®–ò–ë–ö–ò:
- –¢–∏–ø: %s
- –û–ø–∏—Å–∞–Ω–∏–µ: %s
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è: %s
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: %s

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è
- –î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º`

	// Smart project formatting prompt
	ProjectFormattingPromptV2 = `–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìä –î–ê–ù–ù–´–ï:
- –ü—Ä–æ–µ–∫—Ç—ã: %s
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d
- –§–∏–ª—å—Ç—Ä: %s
- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: %s

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å —ç–º–æ–¥–∑–∏
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á
- –î–æ–±–∞–≤–ª—è–π –ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
- –í—ã–¥–µ–ª—è–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏`
)

// PromptValidator validates prompt quality
type PromptValidator struct {
	MaxLength      int
	RequiredWords  []string
	ForbiddenWords []string
}

// ValidatePrompt checks prompt quality and returns suggestions
func (v *PromptValidator) ValidatePrompt(prompt string) (bool, []string) {
	var issues []string

	// Check length
	if len(prompt) > v.MaxLength {
		issues = append(issues, fmt.Sprintf("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: %d —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º %d)", len(prompt), v.MaxLength))
	}

	// Check for required words
	for _, word := range v.RequiredWords {
		if !strings.Contains(strings.ToLower(prompt), strings.ToLower(word)) {
			issues = append(issues, fmt.Sprintf("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: %s", word))
		}
	}

	// Check for forbidden words
	for _, word := range v.ForbiddenWords {
		if strings.Contains(strings.ToLower(prompt), strings.ToLower(word)) {
			issues = append(issues, fmt.Sprintf("–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: %s", word))
		}
	}

	return len(issues) == 0, issues
}

// PromptMetrics tracks prompt performance
type PromptMetrics struct {
	PromptID     string
	UserID       int
	UsageCount   int
	SuccessRate  float64
	AvgTokens    int
	AvgResponse  time.Duration
	LastUsed     time.Time
	ErrorRate    float64
	UserRating   float64
}

// PromptOptimizer optimizes prompts based on usage data
type PromptOptimizer struct {
	metrics map[string]*PromptMetrics
}

// NewPromptOptimizer creates a new prompt optimizer
func NewPromptOptimizer() *PromptOptimizer {
	return &PromptOptimizer{
		metrics: make(map[string]*PromptMetrics),
	}
}

// TrackUsage tracks prompt usage for optimization
func (o *PromptOptimizer) TrackUsage(promptID string, userID int, success bool, tokens int, responseTime time.Duration) {
	if o.metrics[promptID] == nil {
		o.metrics[promptID] = &PromptMetrics{
			PromptID: promptID,
			UserID:   userID,
		}
	}

	metric := o.metrics[promptID]
	metric.UsageCount++
	metric.LastUsed = time.Now()
	metric.AvgTokens = (metric.AvgTokens + tokens) / 2
	metric.AvgResponse = (metric.AvgResponse + responseTime) / 2

	if success {
		metric.SuccessRate = (metric.SuccessRate*float64(metric.UsageCount-1) + 1) / float64(metric.UsageCount)
	} else {
		metric.ErrorRate = (metric.ErrorRate*float64(metric.UsageCount-1) + 1) / float64(metric.UsageCount)
	}
}

// GetOptimizationSuggestions returns suggestions for prompt improvement
func (o *PromptOptimizer) GetOptimizationSuggestions(promptID string) []string {
	metric := o.metrics[promptID]
	if metric == nil {
		return []string{"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
	}

	var suggestions []string

	if metric.SuccessRate < 0.8 {
		suggestions = append(suggestions, "–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
	}

	if metric.AvgTokens > 1000 {
		suggestions = append(suggestions, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ - —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø—Ä–æ–º–ø—Ç")
	}

	if metric.AvgResponse > 10*time.Second {
		suggestions = append(suggestions, "–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç")
	}

	if metric.ErrorRate > 0.2 {
		suggestions = append(suggestions, "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã")
	}

	return suggestions
}

// Enhanced system prompt builder with version control
func GetSystemPromptV2(ctx *PromptContext) string {
	if ctx == nil {
		// Fallback to basic prompt
		return BuildAdaptivePrompt(&PromptContext{
			Capability: "basic",
		})
	}

	return BuildAdaptivePrompt(ctx)
}

// CreatePromptContext creates context for adaptive prompts
func CreatePromptContext(db *DB, userID int) *PromptContext {
	ctx := &PromptContext{
		UserID:     userID,
		Capability: "basic",
	}

	// Get user's projects
	projects, err := db.GetUserProjects(userID)
	if err == nil {
		ctx.HasProjects = len(projects) > 0
		if len(projects) > 3 {
			ctx.Capability = "advanced"
		}
		if len(projects) > 10 {
			ctx.Capability = "expert"
		}
	}

	// Get current project
	currentProject, err := db.GetUserCurrentProject(userID)
	if err == nil && currentProject != nil {
		ctx.CurrentProject = currentProject
	}

	return ctx
}

// Test function for prompt validation
func TestPromptQuality() map[string][]string {
	validator := &PromptValidator{
		MaxLength:      3000,
		RequiredWords:  []string{"–ø–æ–º–æ—â–Ω–∏–∫", "—Ñ—É–Ω–∫—Ü–∏–∏"},
		ForbiddenWords: []string{},
	}

	results := make(map[string][]string)

	// Test base modules
	modules := []PromptModule{BaseRoleModule, FunctionCallingRulesModule, ProjectAPIModule}
	for _, module := range modules {
		valid, issues := validator.ValidatePrompt(module.Content)
		if !valid {
			results[module.Name] = issues
		}
	}

	return results
}