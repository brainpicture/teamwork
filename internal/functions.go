package internal

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)



// HandleCallbackQuery handles button clicks for simple operations
func HandleCallbackQuery(bot *tgbotapi.BotAPI, db *DB, query *tgbotapi.CallbackQuery) {
	data := query.Data
	log.Printf("Callback query: '%s' from user %d", data, query.From.ID)

	// Handle create project button
	if data == "create_project_button" {
		log.Printf("Create project button clicked by user %d", query.From.ID)
		editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID,
			"üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤\n\nüí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/project_add")
		bot.Send(editMsg)
		bot.Send(tgbotapi.NewCallback(query.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /project_add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"))
		return
	}

	// Handle suggested project name buttons
	if strings.HasPrefix(data, "suggest_project_") {
		projectName := strings.TrimPrefix(data, "suggest_project_")

		// Get user from database
		user, err := db.GetUserByTgID(query.From.ID)
		if err != nil {
			log.Printf("Error getting user: %v", err)
			bot.Send(tgbotapi.NewCallback(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"))
			return
		}
		if user == nil {
			bot.Send(tgbotapi.NewCallback(query.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
			return
		}

		// Create project directly
		_, err = db.CreateProject(user.ID, projectName, "")
		if err != nil {
			log.Printf("Error creating project: %v", err)
			bot.Send(tgbotapi.NewCallback(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"))
			return
		}

		// Success
		successMsg := fmt.Sprintf("‚úÖ –ü—Ä–æ–µ–∫—Ç '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", projectName)
		editMsg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, successMsg)
		bot.Send(editMsg)
		bot.Send(tgbotapi.NewCallback(query.ID, "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!"))

		log.Printf("User %s created project '%s'", user.TgName, projectName)
		return
	}

	// Default callback response
	bot.Send(tgbotapi.NewCallback(query.ID, ""))
}


